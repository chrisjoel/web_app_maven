pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = credentials('docker_cred2')
        DOCKER_USERNAME='chrisjoel'
        DOCKER_IMAGE = 'web_app_maven'
        DOCKER_TAG = 'latest'
        SONAR_PROJECT_KEY = 'chrisjoel_web_app_maven'
        SONAR_ORG = 'chrisjoel'
        SONAR_TOKEN = credentials('sonarcloud_credential')
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/chrisjoel/web_app_maven.git'
            }
        }
        
        stage('Maven Install') {
            steps {
                script {
                    sh 'mvn clean install'
                }
            }
        }

        stage('Maven Test') {
            steps {
                script {
                    sh 'mvn test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        
        stage('Scan Docker Image with Trivy') {
            steps {
                script {
                    sh "trivy image --exit-code 1 --severity CRITICAL ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Corrected the way to use credentials for login
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_CREDENTIALS_ID}"
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('SonarCloud Analysis') {
            steps {
                withSonarQubeEnv('SonarCloud') {
                    
                    sh 'mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.organization=${SONAR_ORG} -Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup local images
            script {
                sh "docker rmi ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            }
        }
    }
}
